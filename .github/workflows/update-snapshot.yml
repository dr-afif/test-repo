name: Update Today Snapshot

on:
  workflow_dispatch:    # manual trigger
  schedule:
    - cron: '0 0 * * *'   # runs daily at 00:00 UTC (08:00 Malaysia time)

jobs:
  update-today-snapshot:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      # 2Ô∏è‚É£ Install jq
      - name: Install jq
        run: sudo apt-get install -y jq

      # 3Ô∏è‚É£ Pull the latest changes FIRST to avoid conflicts
      - name: Pull latest changes from default branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git pull --rebase

      # 4Ô∏è‚É£ Save raw data snapshot with retry logic for both endpoints
      - name: Save raw data snapshot
        run: |
          # Configuration
          MAX_RETRIES=5
          RETRY_DELAY=30
          BASE_URL="https://sheets-proxy-backend.onrender.com"
          TIMESTAMP=$(date +"%d-%m-%Y")  # DD-MM-YYYY format

          echo "üîÑ Fetching raw data for snapshot..."

          # Function to fetch with retries and save to file
          fetch_with_retry_to_file() {
            local endpoint=$1
            local output_file=$2
            
            for i in $(seq 1 $MAX_RETRIES); do
              echo "Attempt $i for $endpoint..."
              
              # Use timeout to prevent hanging requests
              if curl -s -w "\n%{http_code}" "$BASE_URL/$endpoint" --max-time 60 > temp_response.txt; then
                HTTP_BODY=$(head -n -1 temp_response.txt)
                HTTP_STATUS=$(tail -n 1 temp_response.txt)
                
                if [[ "$HTTP_STATUS" == "200" ]] && echo "$HTTP_BODY" | jq -e . >/dev/null 2>&1; then
                  echo "$HTTP_BODY" > "$output_file"
                  echo "‚úÖ Successfully fetched $endpoint"
                  return 0
                else
                  echo "‚ùå Attempt $i failed for $endpoint (Status: $HTTP_STATUS)"
                fi
              else
                echo "‚ùå Attempt $i failed for $endpoint (Curl error)"
              fi
              
              sleep $RETRY_DELAY
            done
            
            # If all retries fail, create an empty JSON file
            echo '{}' > "$output_file"
            echo "‚ö†Ô∏è  All attempts failed for $endpoint, using empty object"
            return 1
          }

          # Fetch data to temporary files
          fetch_with_retry_to_file "timetable" "timetable.json"
          fetch_with_retry_to_file "contacts" "contacts.json"

          # Combine into snapshot with timestamp
          jq -n --arg ts "$TIMESTAMP" \
            --slurpfile timetable timetable.json \
            --slurpfile contacts contacts.json \
            '{last_updated: $ts, timetable: $timetable[0], contacts: $contacts[0]}' > snapshot.json

          echo "‚úÖ Raw data snapshot created with timestamp: $TIMESTAMP"
          echo "üìä Snapshot content:"
          cat snapshot.json | jq .

          # Clean up temporary files
          rm -f temp_response.txt timetable.json contacts.json

      # 5Ô∏è‚É£ Commit & push if there are changes
      - name: Commit and push if changed
        run: |
          git add snapshot.json
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "Update today snapshot [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi
